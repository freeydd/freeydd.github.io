<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序</title>
      <link href="/2019/05/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/05/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用 wx:for-item 可以指定数组当前元素的变量名，</span><br><span class="line"></span><br><span class="line">使用 wx:for-index 可以指定数组当前下标的变量名：</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx:if 内如果元素超过两个必须在外层用block</span><br><span class="line">&lt;block wx:if=&#123;&#123;post.length&#125;&#125;&gt;  </span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;posts&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;/block&gt;</span><br><span class="line"></span><br><span class="line">&lt;view wx:else&gt;block是一个空标签不渲染成任何标签&lt;/view&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="表单-数据绑定"><a href="#表单-数据绑定" class="headerlink" title="表单   数据绑定"></a>表单   数据绑定</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; bindinput=&quot;inputVal&quot;    value=&quot;&#123;&#123;val&#125;&#125;&quot;/&gt;</span><br><span class="line">  data:&#123;</span><br><span class="line">    val:&quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> inputVal(event) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      val: event.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">传递 item.id  使用 data-xx=&quot;&#123;&#123;yy&#125;&#125;&quot;</span><br><span class="line">&lt;button data-id=&quot;&#123;&#123;item.id&#125;&#125;&quot;  bind:tap=&quot;shan&quot;&gt;del&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">在js内使用</span><br><span class="line">  shan(event) &#123;</span><br><span class="line">    const &#123; id &#125; = event.currentTarget.dataset</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      user: this.data.user.filter(res =&gt; res.id != id)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">导航</span><br><span class="line"> &lt;navigator</span><br><span class="line">    url=&quot;../../redirect/redirect/</span><br><span class="line">    open-type=&quot;switchTab&quot;</span><br><span class="line">    &quot;</span><br><span class="line">  &gt;</span><br><span class="line">    在当前页打开</span><br><span class="line">  &lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">  因为有tabbar原因navigator的跳转必须加 open-type 属性，属性值写为switchTab</span><br></pre></td></tr></table></figure><hr><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data 修改只能使用setdata</span><br></pre></td></tr></table></figure><hr><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">请求</span><br><span class="line">onLoad: function(options) &#123;</span><br><span class="line">    方法</span><br><span class="line">    method:&quot;GET&quot;,</span><br><span class="line">    传参</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: &apos;https://cnodejs.org/api/v1/topics?limit=5&apos;,</span><br><span class="line">      success:res=&gt; &#123;</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          title:res.data.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">跳转</span><br><span class="line">&lt;navigator url=&quot;/pages/post/post?id=&#123;&#123;item.id&#125;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">页面内  有条件跳转</span><br><span class="line">wx.switchTab  跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</span><br><span class="line">wx.reLaunch   关闭所有页面，打开到应用内的某个页面</span><br><span class="line">wx.navigateTo 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 wx.navigateBack 可以返回到原页面。小程序中页面栈最多十层。</span><br><span class="line">wx.navigateBack 关闭当前页面，返回上一页面或多级页面。</span><br><span class="line">wx.redirectTo  关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">options</span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">        console.log(options.id);</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: `https://cnodejs.org/api/v1/topic/$&#123;options.id&#125;`,</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        console.log(res.data.data);</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          title: res.data.data</span><br><span class="line">          </span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先 增加 &quot;enablePullDownRefresh&quot;:true 配置</span><br><span class="line">如果在全局加要在window下</span><br><span class="line"></span><br><span class="line">监听用户下拉刷新事件。</span><br><span class="line">onPullDownRefresh: function() &#123;</span><br><span class="line">    </span><br><span class="line">    const &#123; arr &#125; = this.data</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      arr: arr.map(num =&gt; num * 2)</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.stopPullDownRefresh()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="上拉触发"><a href="#上拉触发" class="headerlink" title="上拉触发"></a>上拉触发</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onReachBottom</span><br></pre></td></tr></table></figure><hr><h2 id="获取全局globaData"><a href="#获取全局globaData" class="headerlink" title="获取全局globaData"></a>获取全局globaData</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const app=getApp()</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack生产环境</title>
      <link href="/2019/05/22/webpack%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/05/22/webpack%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>webpack 生产环境简单配置</p><a id="more"></a><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)</span><br><span class="line">const CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;)</span><br><span class="line">const VueLoaderPlugin = require(&quot;vue-loader/lib/plugin&quot;)</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 模式  生产模式</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">  devtool: &quot;none&quot;,</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &quot;js/[hash:5].bundle.js&quot;,</span><br><span class="line">    path: path.resolve(__dirname, &quot;./dist&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // css 文件的规则</span><br><span class="line">        test: /(\.css|\.scss)$/,</span><br><span class="line">        // use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;]</span><br><span class="line">        use: [</span><br><span class="line">          &quot;style-loader&quot;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              // you can specify a publicPath here</span><br><span class="line">              // by default it use publicPath in webpackOptions.output</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              // autoprefixer 自动添加浏览器厂商前缀</span><br><span class="line">              // 从webpack高版本之后 autoprefixer 就必须带配置才能生效</span><br><span class="line">              // cssnano 压缩css</span><br><span class="line">              plugins: [</span><br><span class="line">                require(&quot;autoprefixer&quot;)(&#123;</span><br><span class="line">                  browsers: [</span><br><span class="line">                    &quot;&gt; 1%&quot;,</span><br><span class="line">                    &quot;last 2 versions&quot;,</span><br><span class="line">                    &quot;not ie &lt;= 8&quot;,</span><br><span class="line">                    &quot;ios &gt;= 8&quot;,</span><br><span class="line">                    &quot;android &gt;= 4.0&quot;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;),</span><br><span class="line">                require(&quot;cssnano&quot;)</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;sass-loader&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        // vue 文件的规则</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        use: [&quot;vue-loader&quot;]</span><br><span class="line">      &#125;,</span><br><span class="line">      // 图片当作模块引入</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpg|gif)$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;url-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              // 图片小于 8kb 自动转化为 base64 编码</span><br><span class="line">              //</span><br><span class="line">              limit: 8192,</span><br><span class="line">              name: &quot;images/[hash:8].[name].[ext]&quot;,</span><br><span class="line">              publicPath: &quot;/&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &quot;./public/index.html&quot;</span><br><span class="line">    &#125;),</span><br><span class="line">    new VueLoaderPlugin(),</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &quot;css/[hash:5].[name].css&quot;,</span><br><span class="line">      chunkFilename: &quot;[id].css&quot;,</span><br><span class="line">      publicPath: &quot;/css&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // 模块解析的时候可以忽略的扩展名</span><br><span class="line">    extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.vue&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack 生产环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack开发</title>
      <link href="/2019/05/22/webpack%E5%BC%80%E5%8F%91/"/>
      <url>/2019/05/22/webpack%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;)</span><br><span class="line">const CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;)</span><br><span class="line">const webpack = require(&quot;webpack&quot;)</span><br><span class="line">const VueLoaderPlugin = require(&quot;vue-loader/lib/plugin&quot;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 模式  开发模式</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">  // 选择 开发工具  开发环境中推荐使用  eval  eval-source-map</span><br><span class="line">  devtool: &quot;eval-source-map&quot;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: &quot;./dist&quot;,</span><br><span class="line">    // 启用模块热替换，局部更新</span><br><span class="line">    hot: true,</span><br><span class="line">    // port: 8080,</span><br><span class="line">    // 减少浏览器控制台的一些提示信息</span><br><span class="line">    clientLogLevel: &quot;none&quot;,</span><br><span class="line">    // 将所有的 404 都指向 index.html</span><br><span class="line">    historyApiFallback: true</span><br><span class="line">  &#125;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &quot;./src/main.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &quot;[name].bundle.js&quot;,</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // module 模块</span><br><span class="line">  // 非js模块的导入需要 loader</span><br><span class="line">  // css 模块需要 style-loader  css-loader</span><br><span class="line">  // loader 的执行是有顺序的，由后往前</span><br><span class="line"></span><br><span class="line">  // 所有的 非 js 模块都被打包到了 xxx.bundle.js (css  images  font )</span><br><span class="line">  // 实现 css 分离</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // css 文件的规则</span><br><span class="line">        test: /(\.css|\.scss)$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        // vue 文件的规则</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        use: [&quot;vue-loader&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  // 插件plugin 给webpack添加一些其他功能</span><br><span class="line">  // HtmlWebpackPlugin 有可能你频繁的修改了入口文件或出口文件，导致 html 文件引入的 文件发生了改变，要频繁的修改</span><br><span class="line">  // 自动新建 html 自动引入文件,让你提供一个 html 模板</span><br><span class="line">  // clean-webpack-plugin 清理 dist 文件夹</span><br><span class="line">  // mini-css-extract-plugin</span><br><span class="line">  // 此插件将CSS提取到单独的文件中</span><br><span class="line">  plugins: [</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &quot;./public/index.html&quot;</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    new VueLoaderPlugin()</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // 模块解析的时候可以忽略的扩展名</span><br><span class="line">    extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.vue&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack配置vue环境</title>
      <link href="/2019/05/21/webpack%E9%85%8D%E7%BD%AEvue%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/05/21/webpack%E9%85%8D%E7%BD%AEvue%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-vue"><a href="#安装-vue" class="headerlink" title="安装 vue"></a>安装 vue</h2><hr><p>npm i vue</p><hr><a id="more"></a><h2 id="安装-vue-loader"><a href="#安装-vue-loader" class="headerlink" title="安装 vue-loader"></a>安装 vue-loader</h2><hr><p>你应该将 vue-loader 和 vue-template-compiler 一起安装——除非你是使用自行 fork 版本的 Vue 模板编译器的高阶用户：</p><p>npm i -D vue-loader vue-template-compiler</p><hr><hr><p>webpack 配置</p><p>webpack.config.js<br>const VueLoaderPlugin = require(‘vue-loader/lib/plugin’)</p><p>module.exports = {<br>module: {<br>rules: [</p><p>{<br>test: /.vue\$/,<br>loader: ‘vue-loader’<br>}<br>]<br>},<br>plugins: [</p><p>new VueLoaderPlugin()<br>]<br>}</p><hr><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><hr><p>模块解析的时候可以省略扩展名</p><p>自动解析确定的扩展</p><p>webpack.config.js</p><p>module.exports = {</p><p>resolve: {<br>extensions: [‘.wasm’, ‘.vue’, ‘.js’, ‘.json’]<br>}<br>};</p><p>能够使用户在引入模块时不带扩展</p><hr><h2 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h2><hr><p>加载和转译 SASS/SCSS 文件</p><p>npm install sass-loader node-sass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">.hello&#123;</span><br><span class="line">    h1&#123;</span><br><span class="line">      color:rgb(103, 235, 70)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><hr><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html</span><br><span class="line">devServer.historyApiFallback 默认禁用</span><br><span class="line">  historyApiFallback: true</span><br><span class="line">  </span><br><span class="line">当使用内联模式(inline mode)时，会在开发工具(DevTools)的控制台(console)显示消息，例如：在重新加载之前，在一个错误之前，或者 模块热替换(Hot Module Replacement) 启用时。默认值是 info。</span><br><span class="line"></span><br><span class="line">  clientLogLevel: &apos;none&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2019/05/21/webpack/"/>
      <url>/2019/05/21/webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="先将项目建成-npm-项目"><a href="#先将项目建成-npm-项目" class="headerlink" title="先将项目建成 npm 项目"></a>先将项目建成 npm 项目</h2><hr><p>npm init -y<br>npm i webpack -D<br>npm I webpack-cli</p><hr><a id="more"></a><h2 id="创建目录结构，文件和内容"><a href="#创建目录结构，文件和内容" class="headerlink" title="创建目录结构，文件和内容"></a>创建目录结构，文件和内容</h2><hr><p>创建 webpack.config.js</p><p>const path = require(‘path’);<br>module.exports = {<br>entry: ‘./src/index.js’,<br>output: {<br>filename: ‘main.js’,<br>path: path.resolve(__dirname, ‘dist’)<br>}<br>};</p><hr><h2 id="在命令行执行"><a href="#在命令行执行" class="headerlink" title="在命令行执行"></a>在命令行执行</h2><hr><p>npx webpack –config webpack.config.js<br>在 packjson scripts 中可以简写<br>“build”: “npx webpack –config webpack.config.js”</p><hr><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><hr><p>module<br>非 js 模块的导入需要 loader<br>css 模块需要 css-loader style-loader</p><hr><h2 id="多入口-对应多出口"><a href="#多入口-对应多出口" class="headerlink" title="多入口 对应多出口"></a>多入口 对应多出口</h2><hr><p>const path = require(‘path’);<br>module.exports = {<br>entry: {<br>app: ‘./src/index.js’,<br>print: ‘./src/print.js’<br>},<br>output: {<br>filename: ‘[name].bundle.js’,<br>path: path.resolve(__dirname, ‘dist’)<br>}<br>};</p><hr><h2 id="设置-HtmlWebpackPlugin"><a href="#设置-HtmlWebpackPlugin" class="headerlink" title="设置 HtmlWebpackPlugin"></a>设置 HtmlWebpackPlugin</h2><hr><p>npm install –save-dev html-webpack-plugin</p><p>HtmlWebpackPlugin 还是会默认生成它自己的 index.html 文件。也就是说，它会用新生成的 index.html 文件，替换我们的原有文件。</p><p>HtmlWebpackPlugin<br>有可能频繁的修改入口文件或出口文件，导致 html 文件 引入的文件发生改变 ，要频繁修改</p><p>自动新建 html 自动引入文件， 可以提供一个 html 模板</p><p>new HtmlWebpackPlugin({<br>template:”./public/index.html”<br>})</p><hr><h2 id="清理-dist-文件夹-clean-webpack-plugin"><a href="#清理-dist-文件夹-clean-webpack-plugin" class="headerlink" title="清理 dist 文件夹 clean-webpack-plugin"></a>清理 dist 文件夹 clean-webpack-plugin</h2><hr><p>在每次构建前清理 /dist 文件夹，这样只会生成用到的文件<br>npm install –save-dev clean-webpack-plugin</p><hr><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><hr><p>使用  source map<br>先将 mode 设置为 ‘development’,</p><p>当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置</p><p>为了更容易地追踪 error 和 warning，JavaScript 提供了 source map 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 b.js，source map 就会明确的告诉你</p><p>选择开发工具<br>开发环境推荐使用  eval   eval-source-map<br>devtool :”eval-source-map”</p><hr><h2 id="使用-watch-mode-观察模式"><a href="#使用-watch-mode-观察模式" class="headerlink" title="使用 watch mode(观察模式)"></a>使用 watch mode(观察模式)</h2><hr><p>package.json</p><p>你可以指示 webpack “watch” 依赖图中所有文件的更改。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p><p>我们添加一个用于启动 webpack watch mode 的 npm scripts：</p><p>“watch”: “webpack –watch”,</p><p>在命令行中运行 npm run watch</p><hr><h2 id="使用-webpack-dev-server"><a href="#使用-webpack-dev-server" class="headerlink" title="使用 webpack-dev-server"></a>使用 webpack-dev-server</h2><hr><p>webpack-dev-server 为你提供了一个简单的 web server，并且具有 live reloading(实时重新加载) 功能</p><p>npm install –save-dev webpack-dev-server</p><p>webpack.config.js</p><p>devServer: {<br>    contentBase: ‘./dist’<br>  },</p><p>以上配置告知 webpack-dev-server，将 dist 目录下的文件 serve 到 localhost:8080 下</p><p>添加一个可以直接运行 dev server 的 script：<br>package.json</p><p>“start”: “webpack-dev-server –open”,</p><hr><h2 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a>模块热替换</h2><hr><p>局部更新</p><p>启用HMR</p><p>HMR 不适用于生产环境，这意味着它应当用于开发环境</p><p>new webpack.HotModuleReplacementPlugin()</p><hr>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记</title>
      <link href="/2019/05/20/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/20/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Element-ui"><a href="#Element-ui" class="headerlink" title="Element-ui"></a>Element-ui</h2><p><strong>1.安装</strong><br>npm i element-ui -S<br><strong>2.按需引入</strong><br>npm install babel-plugin-component -D</p><p><strong>3.修改 bable.config.js</strong></p><p>{ “presets”: [[“es2015”, { “modules”: false }]], “plugins”: [ [ “component”, { “libraryName”: “element-ui”, “styleLibraryName”: “theme-chalk” } ] ] }<br><strong>4.新建 element.js</strong><br>专门用来引入 element<br>5.main.js 引入</p><p><a href="https://freeydd.github.io/" target="_blank" rel="noopener">myblog</a></p><hr><a id="more"></a><hr><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><hr><hr><h2 id="1-git-安装及默认设置"><a href="#1-git-安装及默认设置" class="headerlink" title="1.git 安装及默认设置"></a>1.git 安装及默认设置</h2><hr><hr><p><strong><em>安装 git</em></strong><br>在 linux 下直接使用命令：</p><p>sudo apt-get install git<br>windows 下百度 gitbash ，下载安装即可。</p><p>mac 下</p><p>brew install git<br>基本配置<br>配置个人的用户名称和电子邮件地址：</p><p>git config –global user.name “xxxx”<br>git config –global user.email “xxxx”<br>可以查看已有的配置信息</p><p>git config –list</p><hr><hr><hr><h2 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2.工作流程"></a>2.工作流程</h2><hr><hr><p>克隆 Git 仓库作为工作目录（或者自己新建一个工作目录并初始化为 Git 仓库）。<br>增加资源及修改文件。<br>提交修改。<br>如果他人修改了代码，可以更新资源。 3.基本操作命令<br>git init<br>mkdir demo &amp;&amp; cd demo<br>git init<br>通过创建 demo 文件夹，git init 初始化，新建一个仓库。</p><p>git clone<br>如果在 github 上已经有了仓库，可以直接通过 git clone 将项目 clone 到本地。</p><p>git clone [仓库地址]<br>git diff<br>查看做了哪些修改。按 q 退出。</p><p>git add<br>git add 可以将文件添加到缓存去，获得 Git 的跟踪。</p><p>touch a.html<br>git add a.html<br>也可以通过加参数，将所有的文件添加到缓存区。下面的三种方式效果相同。</p><p>git add .<br>git add -A<br>git add *<br>git status<br>git status 可以查看当前版本库各个文件的状态。</p><p>git status<br>git commit<br>git commit 将缓存区内容添加到仓库中</p><p>git commit -m ‘版本留言，尽量写的语义话’<br>git log<br>查看提交记录。</p><p>git reset<br>取消已经缓存的内容。</p><p>git reset –hard HEAD<br>也可以通过版本号回滚</p><p>git reset –hard [版本号]<br>git rm<br>git rm 命令把一个文件删除，并把它从 git 的仓库管理系统中移除。</p><p>git rm readme.md<br>git checkout<br>取消对某个文件的修改，通过 git status 查看状态，然后执行 git checkout</p><p>git checkout 文件名</p><hr><hr><h2 id="3-推送代码"><a href="#3-推送代码" class="headerlink" title="3.推送代码"></a>3.推送代码</h2><hr><hr><p>首先，要在 github 上新建仓库，然后 clone 下来。</p><p>git push<br><em>首次推送</em><br>git push -u origin master<br><em>之后可以省略参数</em><br>git push<br>如果没有通过 clone 现有仓库，而是直接在本地 git init 的仓库的话，需要先添加远程仓库地址。</p><p><em>为这个仓库添加一个远程地址</em><br>git remote add origin [你的 github 上的仓库地址]<br>但是这里还有个问题，就是每次 push 都需要输入用户名和密码，很麻烦。这里需要设置下 ssh 。</p><p>设置 public key<br>首先需要在本地机器上生成 key。执行</p><p>ssh-keygen<br>这时，会在 ~/.ssh/ 文件夹之下生成一对 ssh key ，包括一个 public key 和一个 private key 。（如果是 windows 用户，这个文件一般会在这里：C:\Users\Administrator.ssh）</p><p>复制 public key</p><p>cat ~/.ssh/id_rsa.pub<br>将拷贝的 public key 添加在 github 账户上：</p><p>右上角点击头像-&gt; 点击 settings-&gt; 点击 SSH KEYS-&gt; 点击 ADD SSH KEYS-&gt; 将获取的 public key 粘贴于此</p><hr><hr><h2 id="4-分支操作"><a href="#4-分支操作" class="headerlink" title="4.分支操作"></a>4.分支操作</h2><hr><hr><p>创建新分支</p><p>git branch [yourbranch]<br>切换分支</p><p>git checkout [yourbranch]<br>或者直接创建一个分支，并且切换过去</p><p>git checkout -b [yourbranch]<br>删除分支</p><p>git branch -d [yourbranch]<br>推送分支</p><p>git push origin [yourbranch]</p><hr><hr><h2 id="5-分支更新及合并"><a href="#5-分支更新及合并" class="headerlink" title="5.分支更新及合并"></a>5.分支更新及合并</h2><hr><hr><p>拉取主分支上的更新</p><p>git pull origin master<br>合并其他分支代码</p><p>git merge [otherbranch]</p><hr>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue框架</title>
      <link href="/2019/05/20/vue%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/05/20/vue%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Vue-框架"><a href="#Vue-框架" class="headerlink" title="Vue 框架"></a>Vue 框架</h2><p>之前使用 jquery 写页面,是直接操作了 dom 去处理页面的交互。vue react 等框架不是直接操作 dom，而是虚拟一个 dom 去操作，然后把最终结果渲染到页面。</p><h3 id="单页面应用-SPA"><a href="#单页面应用-SPA" class="headerlink" title="单页面应用(SPA)"></a>单页面应用(SPA)</h3><p>现在一些基础的框架默认都是制作单页面应用的。</p><a id="more"></a><h3 id="安装-vue-环境"><a href="#安装-vue-环境" class="headerlink" title="安装 vue 环境"></a>安装 vue 环境</h3><p>我们使用的是 vue-cli3 版本搭建 vue 的开发环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure></p><p>工具安装好之后，可以使用该工具搭建 vue 的环境了，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-hello</span><br></pre></td></tr></table></figure></p><p>创建了一个项目叫 vue-hello 里面搭建好了 vue 环境<br>创建的时候，你会被提示选取一个 preset。</p><ol><li>default(babel,eslint) 默认</li><li>Manually select features 自选<br>我们直接选择第一项，默认就会创建一个 vue-hello 项目，vue 会自动给做好一个 demo，我们自己手动修改一下这个 demo，在页面中展示一个 hello world<br>src 下有一个 main.js 文件，这个文件是入口文件</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/20/hello-world/"/>
      <url>/2019/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
